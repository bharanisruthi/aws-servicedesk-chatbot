"""This lambda function is the fulfillment code hook for GetTicketDetails.It takes the ticket number from customer and return the ticket details to customer"""#Author: Bharani V, Sruthi Aimport boto3from boto3.dynamodb.conditions import Key, Attrimport loggingimport reimport datetimefrom sdconf import messages_configfrom sdconf import intent_slots_configimport SendEmaillogger = logging.getLogger()logger.setLevel(logging.DEBUG)# Helper functions to build responsesdef elicitSlot(sessionAttributes, message, intentName, slots, slotToElicit,outputDialogMode):     return {                "sessionAttributes":sessionAttributes,                "dialogAction": {                    "type": "ElicitSlot",                    "message": {                        "contentType": outputDialogMode,                        "content": message                    },                "intentName": intentName,                "slots": slots,                "slotToElicit" : slotToElicit,                },                    }def elicitIntent(sessionAttributes, message,outputDialogMode):    return {                "sessionAttributes":sessionAttributes,                "dialogAction": {                    "type": "ElicitIntent",                    "message": {                        "contentType": outputDialogMode,                        "content": message                        },                    },                    }def confirmIntent(sessionAttributes, message, intentName, slots,outputDialogMode):    return {                    "sessionAttributes":sessionAttributes,                    "dialogAction": {                    "type": "ConfirmIntent",                    "message": {                      "contentType": outputDialogMode,                      "content": message                    },                    "intentName": intentName,                        "slots": slots,                },            }        def close(sessionAttributes, fulfillmentState, message,outputDialogMode):     logger.debug("sessionAttributes in td {},{},{},{}".format(sessionAttributes,fulfillmentState, message,outputDialogMode))     return {                "sessionAttributes": sessionAttributes,                "dialogAction": {                    "type": "Close",                    "fulfillmentState": fulfillmentState,                    "message": {                      "contentType": outputDialogMode,                      "content": message                    },                },            }def delegate(sessionAttributes,slots):    return {        'sessionAttributes': sessionAttributes,        'dialogAction': {            'type': 'Delegate',            'slots': slots        }    }def buildResGetTicketDetails(sessionAttributes,outputDialogMode,message):        if message is not None:        if message == messages_config.inValidFormat:            #sessionAttributes, message, intentName, slots, slotToElicit            msg = messages_config.noTicketInput            intentName = intent_slots_config.getTicketDetails            slots = intent_slots_config.getSlots(intentName)            return elicitSlot(sessionAttributes,msg,intentName,slots, intent_slots_config.getTicketDetailsSlots["ticketId"],outputDialogMode)                   elif message == messages_config.noEmailID:            logger.debug("No email ID")            msg = messages_config.askEmailId            intentName = intent_slots_config.greeting            slots = intent_slots_config.getSlots(intentName)            return elicitSlot(sessionAttributes,msg,intentName,slots, intent_slots_config.greetingSlots["emailId"],outputDialogMode)                else:            msg = "{}. {}".format(message,messages_config.followUp)            return close(sessionAttributes, "Fulfilled", msg,outputDialogMode)        else:        msg = "{}. {}".format(messages_config.noTicketFound,messages_config.logTikcet)        intentName = intent_slots_config.logIssue        slots = intent_slots_config.getSlots(intentName)        return confirmIntent(sessionAttributes,msg,intentName,slots,outputDialogMode)def extractTicket(input):    ticketId = re.search(r'(\b[sS][dD]\d{5}\b)',input,flags=0)    return ticketIddef validateEmailIdFormat(emailId):         emailE = re.search(r'[\w\.-]+@[\w\.-]+', emailId)    match = re.match('^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$',emailE.group(0)) if emailE else None    logger.debug("Input {}".format(emailE))    if match == None:        logger.debug("Email id not provided or not provided in right format")        return None    else:        logger.debug("Email extracted: {}".format(match.group(0)))        return match.group(0).lower()     def verifyCustomer(emailid):    customer_details_table = boto3.resource('dynamodb').Table('CustomerDetails')    logger.debug("Got customer  table details")    verifyCustomer = customer_details_table.scan(FilterExpression=Attr('EmailID').eq(emailid))    if verifyCustomer['Count'] == 1:        return True    else:        return Falsedef generateTicketID():    ticket_ID_table = boto3.client('dynamodb')    ticket_details = ticket_ID_table.get_item(        Key={        'Counter': {            'S': 'LARGEST',        },    },    TableName='TrackTicketID',)    print (ticket_details)    ticketid = ticket_details['Item']['Value']['N']    print (ticketid)    ticketid = int(ticketid)+1    response = ticket_ID_table.update_item(    ExpressionAttributeNames={        '#id': 'Value',    },    ExpressionAttributeValues={        ':id': {            'N': str(ticketid),        },    },    Key={        'Counter': {            'S': 'LARGEST',        },    },    ReturnValues='ALL_NEW',    TableName='TrackTicketID',    UpdateExpression='SET #id = :id',)         ticket_ID = 'SD'+str(100000+ticketid)[1:]    print (ticket_ID)    return ticket_IDdef validateUpdateTicketDetIntent(slots,sessionAttributes,outputDialogMode,intentName):    emailIdInput = slots["Email_ID"]    ticketIDInput = slots["Ticket_Id"]    updatedDescription = slots["Updated_Description"]    if not emailIdInput:        try:            emailId = sessionAttributes["emailid"]        except KeyError as err:            emailId = None            logger.info("{}.session attributes does not contain email id".format(intentName))            logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))        if emailId is not None:            slots["Email_ID"]= emailId            logger.debug("email id set{}".format(emailId))                            return elicitSlot(sessionAttributes, messages_config.askTicketID, intentName, slots,                                  intent_slots_config.updateTicketDetailsSlots["ticketId"], outputDialogMode)        else:            logger.debug("EMAIL not set")            return elicitSlot(sessionAttributes, messages_config.askEmailId, intentName, slots,                              intent_slots_config.updateTicketDetailsSlots["emailId"], outputDialogMode)              if emailIdInput:        emailId = validateEmailIdFormat(emailIdInput)        if emailId is not None:            sessionAttributes["emailid"] = emailId            logger.debug("Calling ticket intent")            logger.debug(slots)        else:            return elicitSlot(sessionAttributes, messages_config.askEmailIdCorrectFormat, intentName, slots,intent_slots_config.updateTicketDetailsSlots["emailId"], outputDialogMode)    if ticketIDInput:        logger.debug("ticket id is not none")        ticketID = extractTicket(slots["Ticket_Id"])                    if ticketID is None:            logger.error("User input invalid {}".format(slots["Ticket_Id"]))            return elicitSlot(sessionAttributes, messages_config.noTicketInput, intentName, slots,                              intent_slots_config.updateTicketDetailsSlots["ticketId"], outputDialogMode)    return delegate(sessionAttributes, slots)def getTicketDetails(event):    """    This function manages all the scenarios for get ticket details intent    According to the input text, it tr ies to extract ticket id    Verifies the ticket id and respond accordingly    """    logger.debug(event)    slots = event["currentIntent"]["slots"]        intentName = intent_slots_config.getTicketDetails    emailIdInput = slots["Email_ID"]    ticketIDInput = slots["Ticket_Id"]    outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"    sessionAttributes = event["sessionAttributes"] if event["sessionAttributes"] is not None else {}    if event['invocationSource'] == 'DialogCodeHook':        if emailIdInput is None:            try:                emailId = sessionAttributes["emailid"]            except KeyError as err:                emailId = None                logger.info("session attributes does not contain email id")                logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))            if emailId is not None:                 slots["Email_ID"]= emailId                 #return elicitSlot(sessionAttributes, messages_config.askTicketID, intentName, slots,                  #            intent_slots_config.getTicketDetailsSlots["ticketId"], outputDialogMode)            else:                 return elicitSlot(sessionAttributes, messages_config.askEmailId, intentName, slots,                              intent_slots_config.getTicketDetailsSlots["emailId"], outputDialogMode)        if emailIdInput:                emailId = validateEmailIdFormat(emailIdInput)                if emailId:                    sessionAttributes["emailid"] = emailId                    slots["Email_ID"]= emailId                else:                    return elicitSlot(sessionAttributes, messages_config.askEmailIdCorrectFormat, intentName, slots,                              intent_slots_config.getTicketDetailsSlots["emailId"], outputDialogMode)        return delegate(sessionAttributes,slots)    logger.debug("Get ticket details")    try:        logger.debug("Connecting to database...")        ticket_details_table = boto3.resource('dynamodb').Table('TicketDetails')        logger.info("Connected")        slots = event["currentIntent"]["slots"]        outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"        sessionAttributes = event["sessionAttributes"] if event["sessionAttributes"] is not None else {}        logger.debug("sessionAttributes in td {}".format(sessionAttributes))        message =""        #Getting email id from session attribute        try:            emailId = sessionAttributes["emailid"]            logger.info("EmailID {}".format(emailId))        except KeyError as err:            logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))            logger.info("EmailID is not present")            return buildResGetTicketDetails(sessionAttributes,outputDialogMode,messages_config.noEmailID)                #Extracting Ticket_ID        logger.info("Ticket id {}".format(slots["Ticket_Id"]))        ticketID = extractTicket(slots["Ticket_Id"])        if ticketID is None:            logger.error("User input invalid {}".format(slots["Ticket_Id"]))            return buildResGetTicketDetails(sessionAttributes,outputDialogMode,messages_config.inValidFormat)                logger.info(ticketID)        logger.info("Ticket ID module")         logger.info("Getting ticket details")        ticket_details = ticket_details_table.query(                                KeyConditionExpression=Key('Ticket_ID').eq(ticketID.group(0).upper())&Key('Email_ID').eq(emailId)                            )                        if ticket_details['Count'] == 1:            logger.info("Logging ticket details")            message = ('Ticket ID: {} \nStatus: {} \nComments: {}\n'.format(ticket_details['Items'][0]['Ticket_ID'],ticket_details['Items'][0]['Status'],ticket_details['Items'][0]['Comments']))            logger.info(message)        if ticket_details['Count'] > 1:            logger.info("More than one record returned")            return close({},"Failed",messages_config.appliationIssueMessage,outputDialogMode)        if ticket_details['Count'] == 0:            logger.info("Logging ticket details")            message = messages_config.noTicketInput            logger.info(message)        logger.info("message {}".format(message))        return buildResGetTicketDetails(sessionAttributes,outputDialogMode,message)        except Exception as err:        logger.error(type(err))        logger.error(err)        return close({},"Failed",messages_config.systemIssueMeesage,outputDialogMode)def updateTicketDetails(event):    """    This function manages all the scenarios for update ticket details intent    According to the input text, it tr ies to extract ticket id    Verifies the ticket id and updates the issue in the database accordingly    """    logger.debug(event)    slots = event["currentIntent"]["slots"]    emailIdInput = slots["Email_ID"]    ticketIDInput = slots["Ticket_Id"]    #updatedDescription = slots["Updated_Description"]    intentName = event["currentIntent"]["name"]    #slots = intent_slots_config.getSlots(intentName)    outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"    sessionAttributes = event["sessionAttributes"] if event["sessionAttributes"] is not None else {}        if event['invocationSource'] == 'DialogCodeHook':        if not emailIdInput:            try:                emailId = sessionAttributes["emailid"]            except KeyError as err:                emailId = None                logger.info("{}.session attributes does not contain email id".format(intentName))                logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))            if emailId is not None:                slots["Email_ID"] = emailId                logger.debug("email id set{}".format(emailId))                #return delegate(sessionAttributes, slots)                #return elicitSlot(sessionAttributes, messages_config.askTicketID, intentName, slots,                                  #intent_slots_config.updateTicketDetailsSlots["ticketId"], outputDialogMode)            else:                logger.debug("EMAIL not set")                #return delegate(sessionAttributes, slots)                return elicitSlot(sessionAttributes, messages_config.askEmailId, intentName, slots,                                  intent_slots_config.updateTicketDetailsSlots["emailId"], outputDialogMode)        if emailIdInput:            emailId = validateEmailIdFormat(emailIdInput)            if emailId is not None:                sessionAttributes["emailid"] = emailId                logger.debug("Calling ticket intent")                logger.debug(slots)            else:                return elicitSlot(sessionAttributes, messages_config.askEmailIdCorrectFormat, intentName, slots,                                  intent_slots_config.updateTicketDetailsSlots["emailId"], outputDialogMode)##        if not ticketIDInput:##            try:####                ticketID = sessionAttributes["ticketid"]####            except KeyError as err:####                ticketID = None####                logger.info("{}.session attributes does not contain ticket id".format(intentName))####                logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))####            if ticketID is not None:####                slots["Ticket_Id"] = ticketID##                logger.debug("ticket id set{}".format(ticketID))####                # return delegate(sessionAttributes, slots)##                # return elicitSlot(sessionAttributes, messages_config.askTicketID, intentName, slots,##                # intent_slots_config.updateTicketDetailsSlots["ticketId"], outputDialogMode)####            else:##                logger.debug("ticket id not set")####                # return delegate(sessionAttributes, slots)####                return elicitSlot(sessionAttributes, messages_config.askTicketID, intentName, slots,##                                  intent_slots_config.updateTicketDetailsSlots["ticketId"], outputDialogMode)        if ticketIDInput:            logger.debug("ticket id is not none")            ticketID = extractTicket(slots["Ticket_Id"])            if ticketID is None:                logger.error("User input invalid {}".format(slots["Ticket_Id"]))                return elicitSlot(sessionAttributes, messages_config.noTicketInput, intentName, slots,                                  intent_slots_config.updateTicketDetailsSlots["ticketId"], outputDialogMode)            else:                #sessionAttributes["ticketid"] = (ticketID.group(0)).upper()                logger.debug("Ticket id is set in sesion attribute")        logger.info("before return delegate statement {}".format(sessionAttributes))        return delegate(sessionAttributes, slots)    logger.info("slots {}".format(slots))    try:        logger.debug("Connecting to database...")        ticket_details_table_c = boto3.client('dynamodb')        ticket_details_table = boto3.resource('dynamodb').Table('TicketDetails')        logger.info("Connected")        slots = event["currentIntent"]["slots"]        outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"        sessionAttributes = event["sessionAttributes"] if event["sessionAttributes"] is not None else {}        logger.debug("sessionAttributes in td {}".format(sessionAttributes))        # Getting email id from session attribute        try:            emailId = sessionAttributes["emailid"]            logger.info("EmailID {}".format(emailId))        except KeyError as err:            logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))            logger.info("EmailID is not present")            return elicitSlot(sessionAttributes, messages_config.askEmailId, intentName, slots,                                  intent_slots_config.updateTicketDetailsSlots["emailId"], outputDialogMode)        # Extracting Ticket_ID        logger.info("Ticket id {}".format(slots["Ticket_Id"]))        ticketID = extractTicket(slots["Ticket_Id"])        if ticketID is None:            logger.error("User input invalid {}".format(slots["Ticket_Id"]))            return elicitSlot(sessionAttributes, messages_config.noTicketInput, intentName, slots,                                  intent_slots_config.updateTicketDetailsSlots["ticketId"], outputDialogMode)        logger.info(ticketID)        logger.info("Ticket ID module")        logger.info("Getting ticket details")        ticket_details = ticket_details_table.query(            KeyConditionExpression=Key('Ticket_ID').eq(ticketID.group(0).upper()) & Key('Email_ID').eq(emailId)        )        if ticket_details['Count'] == 1:            logger.info("Update ticket details")            comments = ticket_details['Items'][0]['Comments']            ticketId = ticket_details['Items'][0]['Ticket_ID']            if intentName == "UpdateTicketDetails":                updateMessage = messages_config.updatedConfirmMessage                 logger.debug(slots["Updated_Description"])                comments = comments+ ' Date:  '+str(datetime.date.today()) + " "+ slots["Updated_Description"]+" "                status = "Open"            else:                updateMessage = '{} {}.' .format(messages_config.closeConfirmMessage, ticketID.group(0).upper())                  status = "Close"            message = ('Ticket ID: {} \nStatus: {} \nComments: {}\n'.format(ticket_details['Items'][0]['Ticket_ID'],                                                                            ticket_details['Items'][0]['Status'],                                                                            ticket_details['Items'][0]['Comments']))            updateIssueDescription = ticket_details_table_c.update_item(                ExpressionAttributeNames={                    '#Comments': 'Comments',                    '#Status' : 'Status'                },                ExpressionAttributeValues={                    ':Comments': {                        'S': str(comments),                    },                    ':Status': {                        'S' : str(status),                    },                },                Key={                    'Ticket_ID': {                        'S': str(ticketId),                    },                    'Email_ID': {                        'S': str(emailId),                    },                },                ReturnValues='ALL_NEW',                TableName='TicketDetails',                UpdateExpression='SET #Comments = :Comments,#Status = :Status',            )            identifier = "updateIssue"            SendEmail.validateEmail(emailId, comments, ticketId, identifier)            return close(sessionAttributes, "Fulfilled", "{} {}".format(updateMessage,messages_config.followUp), outputDialogMode)        if ticket_details['Count'] > 1:            logger.info("More than one record returned")            return close({}, "Failed", messages_config.appliationIssueMessage, outputDialogMode)        return buildResGetTicketDetails(sessionAttributes, outputDialogMode, None)    except Exception as err:        logger.error(type(err))        logger.error(err)        return close({}, "Failed", messages_config.systemIssueMeesage, outputDialogMode)def hangUp(event):    outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"    return close({},"Fulfilled",messages_config.goodByeMessage,outputDialogMode)def botDescriptorHandler(event):    outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"    return close({}, "Fulfilled", messages_config.welcomeMessage, outputDialogMode)def logIssue(event):    # get issue description    # get emailid from session attributes    # check customer exists or not    # generate new ticket ID    # save it in dynamo DB    # send email to customer    logger.debug("Handler entry point")    logger.debug(event)    outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"    sessionAttributes = event["sessionAttributes"] if event["sessionAttributes"] is not None else {}    ##    try:    ##    ##        emailId = sessionAttributes["emailid"]    ##    ##        logger.info("EmailID {}".format(emailId))    ##    ##    except KeyError as err:    ##    ##        logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))    ##    ##        logger.info("EmailID is not present")    ##    ##        return buildResGetTicketDetails(sessionAttributes,outputDialogMode,messages_config.noEmailID)    slots = event["currentIntent"]["slots"]    intentName = intent_slots_config.logIssue    issueDesc = slots["Issue_Description"]    emailIdInput = slots["Email_ID"]    if event['invocationSource'] == 'DialogCodeHook':        if emailIdInput is None:            try:                emailId = sessionAttributes["emailid"]            except KeyError as err:                emailId = None                logger.info("session attributes does not contain email id")                logger.debug("Exception Type:{}, Exception: {}".format(type(err), err))            if emailId is not None:                slots["Email_ID"]= emailId                return elicitSlot(sessionAttributes, messages_config.askIssueDescription, intentName, slots,                              intent_slots_config.logIssueSlots["issueDescription"], outputDialogMode)            else:                return elicitSlot(sessionAttributes, messages_config.askEmailId, intentName, slots,                              intent_slots_config.logIssueSlots["emailId"], outputDialogMode)        if emailIdInput:            emailId = validateEmailIdFormat(emailIdInput)            if emailId is not None:                sessionAttributes["emailid"] = emailId                slots["Email_ID"]= emailId                #return elicitSlot(sessionAttributes, messages_config.askIssueDescription, intentName, slots,                #                      intent_slots_config.logIssueSlots["issueDescription"], outputDialogMode)            else:                return elicitSlot(sessionAttributes, messages_config.askEmailIdCorrectFormat, intentName, slots,                              intent_slots_config.logIssueSlots["emailId"], outputDialogMode)        return delegate(sessionAttributes,slots)    ticket_details_table = boto3.client('dynamodb')    logger.info("Got ticket table details")    emailId = sessionAttributes["emailid"]    validCustomer = verifyCustomer(emailId.lower())    if validCustomer:        ticketID = generateTicketID()        insertItem = ticket_details_table.put_item(            TableName='TicketDetails',            Item={                'Ticket_ID': {'S': ticketID, },                'Email_ID': {'S': emailId, },                'Status': {'S': 'New', },                'Comments': {'S': 'Not Assigned', },                'Issue_Description': {'S': issueDesc, },            }, )        msg = "{}. The ticket # is {}. {}".format(messages_config.ticketLogged, ticketID, messages_config.followUp)        identifier = "logIssue"        SendEmail.validateEmail(emailId,issueDesc,ticketID,identifier)        return close(sessionAttributes, "Fulfilled", msg, outputDialogMode)    else:        logger.debug("User is not in system")        return close({}, "Failed", messages_config.customerNotFound, outputDialogMode)def greeting(event):    """    This function manages the greeting intent which is to understand the purpose of user intercation/    """    #Get the email id and purpose    #ElicitIntent    #Validate email id    #Verify customer    #Verify intent    logger.debug("Handler entry point")    logger.debug(event)    outputDialogMode = "SSML" if event["outputDialogMode"] == "Voice" else "PlainText"    sessionAttributes = event["sessionAttributes"] if event["sessionAttributes"] is not None else {}    slots = event["currentIntent"]["slots"]    if event['invocationSource'] == 'DialogCodeHook':        if slots["Greet"] and not slots["Email_ID"]:            userID = event["userId"]            logger.debug(userID)            userID_details_table = boto3.resource("dynamodb").Table("UserIDTable")            userID_details = userID_details_table.query(                KeyConditionExpression=Key('UserID').eq(userID)            )            if userID_details['Count'] == 1:                logger.info("Update email id with session")                sessionAttributes["emailid"] = userID_details['Items'][0]['EmailID']            else:                logger.debug("No emai ild present in table")                return elicitSlot(sessionAttributes, messages_config.askEmailId, event["currentIntent"]["name"], slots,                              intent_slots_config.greetingSlots["emailId"], outputDialogMode)        if slots["Email_ID"]:                logger.debug("registering userid")                userID_details_table = boto3.client("dynamodb")                emailID = validateEmailIdFormat(event["currentIntent"]["slots"]["Email_ID"])                sessionAttributes["emailid"]= emailID                if emailID is not None:                    insertItem = userID_details_table.put_item(                        TableName='UserIDTable',                        Item={                        'UserID': {'S': event["userId"], },                        'EmailID': {'S': emailID, },                    }, )                else:                    return elicitSlot(sessionAttributes, messages_config.askEmailId, event["currentIntent"]["name"], slots,                                  intent_slots_config.greetingSlots["emailId"], outputDialogMode)        return delegate(sessionAttributes,slots)    logger.debug("Hii session attribute = {}".format(sessionAttributes))    return close(sessionAttributes,'Fulfilled','Thanks, You can log an issue or Check ticket status.How can I help you?',outputDialogMode)def dispatchIntentRequest(event):    """    Dispatches the request to specific intent depending on user's request    """    logger.debug("dispatch userId = {}, intentName = {}".format(event["userId"], event["currentIntent"]["name"]))    intentName = event["currentIntent"]["name"]    if intentName == "GetOldTicketDetails":        return getTicketDetails(event)    if intentName == "LogIssue":        return logIssue(event)    if intentName =="Greeting":        return greeting(event)    if intentName =="UpdateTicketDetails":        return updateTicketDetails(event)    if intentName =="HangUp":        return hangUp(event)    if intentName == "BotDescriptor" :        return botDescriptorHandler(event)    if intentName == "CloseTicket" :        return updateTicketDetails(event)    raise Exception("Intent Not supported, {}".format(intentName))def SDBot_handler(event, context):    logger.debug('event.bot.name={}'.format(event['bot']['name']))    return dispatchIntentRequest(event)